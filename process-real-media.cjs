/**
 * Script pour traiter les vrais documents Media de Payload
 */

const Queue = require('bull');

async function processRealMedia() {
  console.log('üöÄ Traitement des vrais documents Media...');
  
  const extractionQueue = new Queue('document-extraction', 'redis://localhost:6379');
  
  try {
    // R√©cup√©rer la liste des m√©dias depuis l'API Payload
    console.log('üì° R√©cup√©ration de la liste des m√©dias depuis Payload...');
    
    const response = await fetch('http://localhost:3000/api/media?limit=20', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    if (!response.ok) {
      throw new Error(`Erreur API: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log(`‚úÖ ${data.docs.length} m√©dias trouv√©s dans Payload`);
    
    // Filtrer les PDFs
    const pdfDocs = data.docs.filter(doc => {
      return doc.filename && doc.filename.toLowerCase().endsWith('.pdf');
    });
    
    console.log(`üìÑ ${pdfDocs.length} PDFs trouv√©s:`);
    pdfDocs.forEach((doc, i) => {
      console.log(`   ${i + 1}. ${doc.filename} (ID: ${doc.id})`);
    });
    
    if (pdfDocs.length === 0) {
      console.log('‚ùå Aucun PDF trouv√© dans Payload');
      return;
    }
    
    // Cr√©er des jobs pour les PDFs qui n'ont pas encore de contenu extrait
    let jobsCreated = 0;
    
    for (const pdfDoc of pdfDocs) {
      // V√©rifier si le fichier existe
      const filePath = `/Users/bensaadmohammed/Documents/Dev/projet-saas/payload-cms/public/media/${pdfDoc.filename}`;
      
      try {
        await require('fs').promises.access(filePath);
      } catch (error) {
        console.log(`‚ö†Ô∏è Fichier non trouv√©: ${pdfDoc.filename}, skipping`);
        continue;
      }
      
      // Cr√©er le job avec le vrai ID
      const jobData = {
        type: 'document-extraction',
        documentId: pdfDoc.id.toString(),
        fileType: 'pdf',
        sourceFileId: pdfDoc.id.toString(),
        sourceFileUrl: filePath,
        userId: 'batch-processing',
        priority: 'normal'
      };
      
      const job = await extractionQueue.add('extract-document', jobData, {
        priority: 5,
        attempts: 3,
        removeOnComplete: 10,
        removeOnFail: 10,
      });
      
      console.log(`‚úÖ Job cr√©√© pour ${pdfDoc.filename} (Job ID: ${job.id})`);
      jobsCreated++;
    }
    
    console.log(`\nüéØ ${jobsCreated} jobs cr√©√©s pour l'extraction`);
    console.log('‚è≥ Le worker va maintenant traiter ces jobs...');
    console.log('üîç V√©rifiez avec: node simple-debug-queue.cjs');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
  
  await extractionQueue.close();
  process.exit(0);
}

processRealMedia();