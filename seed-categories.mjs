import 'dotenv/config';
import { getPayload } from 'payload';
import config from './src/payload.config.ts';

/**
 * Script pour g√©n√©rer automatiquement les cat√©gories m√©dicales pour PASS/LAS
 * Usage: node seed-categories.mjs
 */

const categories = [
  // === UE1 - Chimie, Biochimie, Biologie mol√©culaire ===
  {
    title: 'Chimie g√©n√©rale et organique',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Biochimie structurale',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Biochimie m√©tabolique',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Biologie mol√©culaire',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },

  // === UE2 - Biologie cellulaire ===
  {
    title: 'Structure et fonction cellulaire',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Cycle cellulaire et division',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: 'Communication cellulaire',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },

  // === UE3 - Physique, Biophysique ===
  {
    title: 'Physique des fluides',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: '√âlectricit√© et magn√©tisme',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: 'Biophysique des radiations',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: 'Imagerie m√©dicale',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },

  // === UE4 - Math√©matiques, Biostatistiques ===
  {
    title: 'Probabilit√©s et statistiques',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Tests statistiques',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: '√âpid√©miologie',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },

  // === UE5 - Anatomie ===
  {
    title: 'Anatomie g√©n√©rale',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 15 }
  },
  {
    title: 'Syst√®me nerveux',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 12 }
  },
  {
    title: 'Syst√®me cardiovasculaire',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 12 }
  },
  {
    title: 'Syst√®me respiratoire',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Syst√®me digestif',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Appareil locomoteur',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },

  // === UE6 - Pharmacologie ===
  {
    title: 'Pharmacocin√©tique',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Pharmacodynamie',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 10 }
  },
  {
    title: 'Classes th√©rapeutiques',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 12 }
  },

  // === UE7 - Sciences humaines et sociales ===
  {
    title: 'Sant√© publique',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: '√âthique m√©dicale',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },
  {
    title: 'Droit de la sant√©',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 8 }
  },

  // === Cat√©gories sp√©cifiques ===
  {
    title: 'Positionnement Las',
    level: 'LAS',
    adaptiveSettings: { isActive: true, minimumQuestions: 20 }
  },
  {
    title: 'Positionnement Pass',
    level: 'PASS',
    adaptiveSettings: { isActive: true, minimumQuestions: 20 }
  },
  {
    title: 'Quiz de r√©vision g√©n√©rale',
    level: 'both',
    adaptiveSettings: { isActive: true, minimumQuestions: 15 }
  },
];

async function seedCategories() {
  console.log('üå± D√©marrage du seed des cat√©gories...\n');

  try {
    const payload = await getPayload({ config });

    // V√©rifier si des cat√©gories existent d√©j√†
    const existingCategories = await payload.find({
      collection: 'categories',
      limit: 1,
    });

    if (existingCategories.totalDocs > 0) {
      console.log('‚ö†Ô∏è  Des cat√©gories existent d√©j√† dans la base de donn√©es.');
      console.log(`   Nombre de cat√©gories existantes: ${existingCategories.totalDocs}`);
      console.log('\n‚ùì Voulez-vous continuer et ajouter les nouvelles cat√©gories ? (y/n)');
      
      // En production, vous pouvez commenter cette partie et forcer l'ajout
      // Pour l'instant, on continue automatiquement
      console.log('   ‚Üí Ajout des cat√©gories manquantes...\n');
    }

    let created = 0;
    let skipped = 0;
    let errors = 0;

    for (const category of categories) {
      try {
        // V√©rifier si la cat√©gorie existe d√©j√†
        const existing = await payload.find({
          collection: 'categories',
          where: {
            title: {
              equals: category.title,
            },
          },
          limit: 1,
        });

        if (existing.docs.length > 0) {
          console.log(`‚è≠Ô∏è  Cat√©gorie d√©j√† existante: "${category.title}"`);
          skipped++;
          continue;
        }

        // Cr√©er la cat√©gorie
        await payload.create({
          collection: 'categories',
          data: category,
        });

        console.log(`‚úÖ Cat√©gorie cr√©√©e: "${category.title}" (${category.level})`);
        created++;

      } catch (error) {
        console.error(`‚ùå Erreur lors de la cr√©ation de "${category.title}":`, error.message);
        errors++;
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìä R√©sum√© du seed:');
    console.log(`   ‚úÖ Cr√©√©es: ${created}`);
    console.log(`   ‚è≠Ô∏è  Ignor√©es (d√©j√† existantes): ${skipped}`);
    console.log(`   ‚ùå Erreurs: ${errors}`);
    console.log(`   üìù Total trait√©: ${categories.length}`);
    console.log('='.repeat(60) + '\n');

    if (created > 0) {
      console.log('üéâ Seed termin√© avec succ√®s !');
    } else if (skipped === categories.length) {
      console.log('‚ÑπÔ∏è  Toutes les cat√©gories existent d√©j√†.');
    } else {
      console.log('‚ö†Ô∏è  Seed termin√© avec des erreurs.');
    }

    process.exit(0);

  } catch (error) {
    console.error('\n‚ùå Erreur fatale lors du seed:', error);
    process.exit(1);
  }
}

// Ex√©cuter le seed
seedCategories();
