import Queue from 'bull';

const redisUrl = 'redis://localhost:6379';

async function checkFinalResults() {
  console.log('üîç V√©rification des r√©sultats finaux...\n');
  
  try {
    const extractionQueue = new Queue('document-extraction', redisUrl);
    
    const waiting = await extractionQueue.getWaiting();
    const active = await extractionQueue.getActive();
    const completed = await extractionQueue.getCompleted();
    const failed = await extractionQueue.getFailed();
    
    console.log('üìä √âtat final de la queue:');
    console.log(`   En attente: ${waiting.length}`);
    console.log(`   Actifs: ${active.length}`);
    console.log(`   Termin√©s: ${completed.length}`);
    console.log(`   √âchou√©s: ${failed.length}`);
    
    // D√©tails des jobs actifs
    if (active.length > 0) {
      console.log('\nüîÑ Jobs actifs:');
      active.forEach(job => {
        console.log(`   Job ${job.id}: ${job.data.type} (${job.data.collectionType})`);
      });
    }
    
    // D√©tails des derniers jobs termin√©s
    if (completed.length > 0) {
      console.log('\n‚úÖ Derniers jobs termin√©s:');
      completed.slice(-3).forEach(job => {
        console.log(`   Job ${job.id}: termin√© √† ${new Date(job.finishedOn).toLocaleTimeString()}`);
      });
    }
    
    // D√©tails des derniers √©checs
    if (failed.length > 0) {
      console.log('\n‚ùå Derniers √©checs:');
      failed.slice(-2).forEach(job => {
        console.log(`   Job ${job.id}: ${job.failedReason}`);
      });
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

checkFinalResults();