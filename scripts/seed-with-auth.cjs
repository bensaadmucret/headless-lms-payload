const axios = require('axios')
const { config } = require('dotenv')

// Charger les variables d'environnement
config()

const API_BASE = 'http://localhost:3000/api'

// Fonction pour s'authentifier et obtenir un token
async function authenticate() {
  try {
    console.log('üîê Authentification en cours...')
    
    // Utiliser le compte superadmin
    const response = await axios.post(`${API_BASE}/users/login`, {
      email: 'barjacca@gmail.com',
      password: 'root'
    })
    
    if (response.data.token) {
      console.log('‚úÖ Authentification r√©ussie')
      return response.data.token
    } else {
      throw new Error('Aucun token re√ßu')
    }
  } catch (error) {
    console.error('‚ùå Erreur d\'authentification:', error.response?.data || error.message)
    throw error
  }
}

// Fonction pour cr√©er les donn√©es avec authentification
async function createWithAuth(url, data, token) {
  return axios.post(url, data, {
    headers: {
      'Authorization': `JWT ${token}`,
      'Content-Type': 'application/json'
    }
  })
}

async function seedPlacementQuizWithAuth() {
  console.log('üå± D√©marrage du seed avec authentification...\n')
  
  try {
    // 1. S'authentifier
    const token = await authenticate()
    
    // 2. Cr√©er un cours de base
    console.log('\nüìö Cr√©ation du cours de base...')
    let baseCourse
    try {
      const courseData = {
        title: 'M√©decine G√©n√©rale PASS',
        description: 'Cours de base pour le quiz de positionnement en m√©decine PASS',
        level: 'beginner',
        author: 1, // ID de l'utilisateur superadmin
        published: true
      }
      const courseResponse = await createWithAuth(`${API_BASE}/courses`, courseData, token)
      baseCourse = courseResponse.data.doc
      console.log(`‚úÖ Cours cr√©√©: ${baseCourse.title} (ID: ${baseCourse.id})`)
    } catch (error) {
      if (error.response?.data?.message?.includes('duplicate') || error.response?.data?.message?.includes('already exists')) {
        // R√©cup√©rer le cours existant
        try {
          const existing = await axios.get(`${API_BASE}/courses?where[title][equals]=${encodeURIComponent('M√©decine G√©n√©rale PASS')}`, {
            headers: { 'Authorization': `JWT ${token}` }
          })
          if (existing.data.docs?.length > 0) {
            baseCourse = existing.data.docs[0]
            console.log(`‚ÑπÔ∏è  Cours existant: ${baseCourse.title}`)
          }
        } catch (fetchError) {
          console.error('‚ùå Erreur r√©cup√©ration cours:', fetchError.message)
          throw fetchError
        }
      } else {
        console.error('‚ùå Erreur cr√©ation cours:', error.response?.data || error.message)
        throw error
      }
    }

    // 3. Cr√©er les cat√©gories
    console.log('\nüìÅ Cr√©ation des cat√©gories...')
    const categories = [
      { title: 'Anatomie g√©n√©rale', description: 'Structure du corps humain' },
      { title: 'Physiologie', description: 'Fonctionnement des organes' },
      { title: 'Biochimie', description: 'Processus chimiques' }
    ]
    
    const createdCategories = []
    for (const category of categories) {
      try {
        const response = await createWithAuth(`${API_BASE}/categories`, category, token)
        createdCategories.push(response.data.doc)
        console.log(`‚úÖ Cat√©gorie cr√©√©e: ${category.title}`)
      } catch (error) {
        if (error.response?.data?.message?.includes('duplicate') || error.response?.data?.message?.includes('already exists')) {
          // R√©cup√©rer la cat√©gorie existante
          try {
            const existing = await axios.get(`${API_BASE}/categories?where[title][equals]=${encodeURIComponent(category.title)}`, {
              headers: { 'Authorization': `JWT ${token}` }
            })
            if (existing.data.docs?.length > 0) {
              createdCategories.push(existing.data.docs[0])
              console.log(`‚ÑπÔ∏è  Cat√©gorie existante: ${category.title}`)
            }
          } catch (fetchError) {
            console.error(`‚ùå Erreur r√©cup√©ration ${category.title}:`, fetchError.message)
          }
        } else {
          console.error(`‚ùå Erreur cr√©ation ${category.title}:`, error.response?.data || error.message)
        }
      }
    }
    
    console.log(`\nüìä ${createdCategories.length} cat√©gories disponibles`)
    
    if (!baseCourse?.id) {
      throw new Error('Cours de base manquant, impossible de cr√©er les questions')
    }
    
    const questions = [
      {
        course: baseCourse.id,
        category: createdCategories.find(c => c.title === 'Anatomie g√©n√©rale')?.id,
        questionText: {
          root: {
            children: [{
              children: [{ text: "Quel os forme la partie post√©rieure du cr√¢ne ?", type: "text" }],
              direction: "ltr", format: "", indent: 0, type: "paragraph", version: 1
            }],
            direction: "ltr", format: "", indent: 0, type: "root", version: 1
          }
        },
        questionType: 'multipleChoice',
        options: [
          { optionText: 'Frontal', isCorrect: false },
          { optionText: 'Pari√©tal', isCorrect: false },
          { optionText: 'Occipital', isCorrect: true },
          { optionText: 'Temporal', isCorrect: false }
        ],
        explanation: "L'os occipital forme la partie post√©rieure du cr√¢ne.",
        difficultyLevel: 'pass'
      },
      {
        course: baseCourse.id,
        category: createdCategories.find(c => c.title === 'Physiologie')?.id,
        questionText: {
          root: {
            children: [{
              children: [{ text: "Quelle est la fr√©quence cardiaque normale au repos ?", type: "text" }],
              direction: "ltr", format: "", indent: 0, type: "paragraph", version: 1
            }],
            direction: "ltr", format: "", indent: 0, type: "root", version: 1
          }
        },
        questionType: 'multipleChoice',
        options: [
          { optionText: '40-50 bpm', isCorrect: false },
          { optionText: '60-100 bpm', isCorrect: true },
          { optionText: '120-140 bpm', isCorrect: false },
          { optionText: '150-180 bpm', isCorrect: false }
        ],
        explanation: "La fr√©quence cardiaque normale au repos est de 60 √† 100 battements par minute.",
        difficultyLevel: 'pass'
      },
      {
        course: baseCourse.id,
        category: createdCategories.find(c => c.title === 'Biochimie')?.id,
        questionText: {
          root: {
            children: [{
              children: [{ text: "Quel est le principal glucide de r√©serve dans le foie ?", type: "text" }],
              direction: "ltr", format: "", indent: 0, type: "paragraph", version: 1
            }],
            direction: "ltr", format: "", indent: 0, type: "root", version: 1
          }
        },
        questionType: 'multipleChoice',
        options: [
          { optionText: 'Glucose', isCorrect: false },
          { optionText: 'Fructose', isCorrect: false },
          { optionText: 'Glycog√®ne', isCorrect: true },
          { optionText: 'Lactose', isCorrect: false }
        ],
        explanation: "Le glycog√®ne est la forme de stockage du glucose dans le foie et les muscles.",
        difficultyLevel: 'pass'
      }
    ]
    
    const createdQuestions = []
    for (let i = 0; i < questions.length; i++) {
      const question = questions[i]
      if (!question.category) {
        console.log(`‚ö†Ô∏è  Cat√©gorie manquante pour question ${i + 1}, skip`)
        continue
      }
      
      try {
        const response = await createWithAuth(`${API_BASE}/questions`, question, token)
        createdQuestions.push(response.data.doc)
        console.log(`‚úÖ Question ${i + 1} cr√©√©e`)
      } catch (error) {
        console.error(`‚ùå Erreur question ${i + 1}:`, error.response?.data || error.message)
      }
    }
    
    console.log(`\nüéØ ${createdQuestions.length} questions cr√©√©es`)
    
    // 5. Cr√©er le quiz de positionnement
    console.log('\nüß© Cr√©ation du quiz de positionnement...')
    
    if (createdQuestions.length === 0) {
      throw new Error('Aucune question cr√©√©e, impossible de cr√©er le quiz')
    }
    
    const quizData = {
      title: 'Quiz de Positionnement - M√©decine PASS',
      quizType: 'placement',
      description: 'Ce quiz √©value vos connaissances de base en m√©decine pour personnaliser votre parcours d\'apprentissage.',
      questions: createdQuestions.map(q => q.id),
      published: true,
      duration: 15,
      passingScore: 60
    }
    
    try {
      const quizResponse = await createWithAuth(`${API_BASE}/quizzes`, quizData, token)
      const quiz = quizResponse.data.doc
      
      console.log('\nüéâ Quiz de positionnement cr√©√© avec succ√®s !')
      console.log(`   üìù Titre: ${quiz.title}`)
      console.log(`   üÜî ID: ${quiz.id}`)
      console.log(`   ‚ùì Questions: ${createdQuestions.length}`)
      console.log(`   ‚è±Ô∏è  Dur√©e: ${quiz.duration} minutes`)
      console.log(`   ‚úÖ Publi√©: ${quiz.published}`)
      
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation quiz:', error.response?.data || error.message)
      throw error
    }
    
    console.log('\nüöÄ Seed termin√© avec succ√®s !')
    console.log('\nüí° Pour tester :')
    console.log('   1. Connectez-vous avec alice.martin@etudiant.com / password123')
    console.log('   2. Vous devriez √™tre redirig√© automatiquement vers le quiz')
    
  } catch (error) {
    console.error('\nüí• Erreur fatale:', error.message)
    throw error
  }
}

// Ex√©cuter le seed
if (require.main === module) {
  seedPlacementQuizWithAuth()
    .then(() => {
      console.log('\n‚ú® Seed termin√© !')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• √âchec du seed:', error.message)
      process.exit(1)
    })
}