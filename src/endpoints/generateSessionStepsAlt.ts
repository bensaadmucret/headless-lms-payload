// Types pour les endpoints Payload CMS
type Endpoint = {
  path: string;
  method: 'get' | 'post' | 'put' | 'delete' | 'patch';
  handler: (req: any, res: any, next: any) => Promise<void> | void;
};

// Types pour les requ√™tes Payload
type PayloadRequest = {
  user?: {
    id: string;
    email: string;
    collection: string;
    [key: string]: any;
  };
  payload: any;
  params: Record<string, string>;
  query: Record<string, any>;
  body: any;
  [key: string]: any;
};

// Types pour les r√©ponses Express
type Response = {
  status: (code: number) => Response;
  json: (data: any) => void;
  send: (data: any) => void;
  [key: string]: any;
};

type NextFunction = () => void;

// Types pour les objets m√©tier
interface StudySession {
  id: string;
  title: string;
  quiz?: string | Quiz;
  user?: string | User;
  steps?: Array<StudyStep>;
  status: 'draft' | 'in-progress' | 'completed' | 'cancelled';
  [key: string]: any;
}

interface StudyStep {
  id?: string;
  type: 'instruction' | 'question' | 'quiz' | 'review' | 'flashcards';
  title: string;
  content: string;
  questionType?: 'multiple-choice' | 'open';
  options?: Array<{
    text: string;
    isCorrect: boolean;
  }>;
  metadata?: {
    quizId?: string;
    questionId?: string;
    duration?: number;
  };
}

interface Quiz {
  id: string;
  title: string;
  questions?: Array<Question>;
  [key: string]: any;
}

interface Question {
  id: string;
  text: string;
  type: 'multiple-choice' | 'open';
  options?: Array<{
    text: string;
    isCorrect: boolean;
  }>;
  explanation?: string;
  [key: string]: any;
}

interface User {
  id: string;
  email: string;
  [key: string]: any;
}

/**
 * Version alternative de l'endpoint pour g√©n√©rer des √©tapes d'√©tude
 * Cette version utilise un chemin sans le pr√©fixe /api pour contourner les probl√®mes de routage
 */
export const generateSessionStepsAltEndpoint: Endpoint = {
  path: '/study-sessions/:id/generate-steps',
  method: 'post',
  handler: async (req: PayloadRequest, res: Response, next: NextFunction) => {
    try {
      console.log(`üîÑ [Alt Endpoint] G√©n√©ration des √©tapes pour la session d'√©tude ID: ${req.params.id}`);
      
      // V√©rifier que l'utilisateur est authentifi√©
      if (!req.user) {
        console.log('‚ùå Utilisateur non authentifi√©');
        return res.status(401).json({ 
          success: false,
          message: 'Non autoris√©' 
        });
      }

      const sessionId = req.params.id;
      
      // R√©cup√©rer la session d'√©tude
      const session = await req.payload.findByID({
        collection: 'study-sessions',
        id: sessionId,
        depth: 2, // Pour r√©cup√©rer les relations (quiz, user)
      });

      if (!session) {
        console.log(`‚ùå Session d'√©tude non trouv√©e: ${sessionId}`);
        return res.status(404).json({
          success: false,
          message: 'Session d\'√©tude non trouv√©e'
        });
      }

      // V√©rifier que la session appartient √† l'utilisateur connect√©
      if (session.user && typeof session.user === 'object' && session.user.id !== req.user.id) {
        console.log(`‚õî Acc√®s non autoris√© √† la session ${sessionId} pour l'utilisateur ${req.user.id}`);
        return res.status(403).json({
          success: false,
          message: 'Vous n\'√™tes pas autoris√© √† acc√©der √† cette session'
        });
      }

      // V√©rifier que la session a un quiz associ√©
      if (!session.quiz) {
        console.log(`‚ùå Pas de quiz associ√© √† la session ${sessionId}`);
        return res.status(400).json({
          success: false,
          message: 'La session n\'a pas de quiz associ√©'
        });
      }

      // R√©cup√©rer le quiz complet avec ses questions
      const quizId = typeof session.quiz === 'object' ? session.quiz.id : session.quiz;
      const quiz = await req.payload.findByID({
        collection: 'quizzes',
        id: quizId,
        depth: 2, // Pour r√©cup√©rer les questions et leurs options
      });

      if (!quiz || !quiz.questions || !Array.isArray(quiz.questions) || quiz.questions.length === 0) {
        console.log(`‚ùå Quiz ${quizId} non trouv√© ou sans questions`);
        return res.status(400).json({
          success: false,
          message: 'Le quiz associ√© n\'a pas de questions'
        });
      }

      console.log(`üìù G√©n√©ration des √©tapes pour le quiz: ${quiz.title}`);

      // G√©n√©rer les √©tapes d'√©tude bas√©es sur les questions du quiz
      const steps: StudyStep[] = [];
      
      // √âtape d'introduction
      steps.push({
        type: 'instruction',
        title: 'Introduction',
        content: `<h2>Bienvenue dans votre session d'√©tude</h2>
                 <p>Ce quiz contient ${quiz.questions.length} questions sur le th√®me : ${quiz.title}</p>
                 <p>Prenez votre temps pour r√©pondre √† chaque question. Vous pouvez revenir en arri√®re si n√©cessaire.</p>`,
      });

      // √âtapes pour chaque question
      quiz.questions.forEach((question: Question, index: number) => {
        steps.push({
          type: 'question',
          title: `Question ${index + 1}`,
          content: question.text,
          questionType: question.type,
          options: question.options,
          metadata: {
            quizId: quiz.id,
            questionId: question.id,
            duration: 60, // Dur√©e par d√©faut en secondes
          },
        });
      });

      // √âtape de conclusion
      steps.push({
        type: 'review',
        title: 'Conclusion',
        content: `<h2>F√©licitations !</h2>
                 <p>Vous avez termin√© toutes les questions de cette session d'√©tude.</p>
                 <p>Cliquez sur "Terminer" pour voir vos r√©sultats.</p>`,
      });

      console.log(`‚úÖ ${steps.length} √©tapes g√©n√©r√©es pour la session ${sessionId}`);

      // Mettre √† jour la session avec les √©tapes g√©n√©r√©es
      const updatedSession = await req.payload.update({
        collection: 'study-sessions',
        id: sessionId,
        data: {
          steps: steps,
          status: 'in-progress',
        },
      });

      return res.status(200).json(updatedSession);

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration des √©tapes:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      return res.status(500).json({
        success: false,
        message: 'Erreur lors de la g√©n√©ration des √©tapes',
        error: errorMessage
      });
    }
  }
};
