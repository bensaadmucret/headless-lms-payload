import type { PayloadRequest } from 'payload'
import { AIQuizGenerationService } from '../services/AIQuizGenerationService'

/**
 * Endpoint pour r√©g√©n√©rer une question sp√©cifique
 * T√¢che 9: Possibilit√© de r√©g√©n√©rer des questions sp√©cifiques
 * Exigences: 9.4
 */
export const regenerateQuestion = async (req: PayloadRequest): Promise<Response> => {
  try {
    // V√©rifier l'authentification et les permissions
    if (!req.user) {
      return new Response(JSON.stringify({ 
        error: 'Authentification requise' 
      }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Seuls les admins peuvent r√©g√©n√©rer
    if (req.user.role !== 'admin' && req.user.role !== 'superadmin') {
      return new Response(JSON.stringify({ 
        error: 'Permissions insuffisantes pour r√©g√©n√©rer des questions' 
      }), {
        status: 403,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const body = await req.json!()
    const { questionId, quizId, regenerationReason } = body

    if (!questionId || !quizId) {
      return new Response(JSON.stringify({ 
        error: 'ID de question et de quiz requis' 
      }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // R√©cup√©rer la question originale
    const originalQuestion = await req.payload.findByID({
      collection: 'questions',
      id: questionId as string,
      depth: 1
    })

    if (!originalQuestion) {
      return new Response(JSON.stringify({ 
        error: 'Question non trouv√©e' 
      }), {
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // R√©cup√©rer le quiz pour obtenir le contexte
    const quiz = await req.payload.findByID({
      collection: 'quizzes',
      id: quizId as string,
      depth: 1
    })

    if (!quiz) {
      return new Response(JSON.stringify({ 
        error: 'Quiz non trouv√©' 
      }), {
        status: 404,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Initialiser le service de g√©n√©ration IA
    const aiService = new AIQuizGenerationService(req.payload)

    // Extraire le contexte de la question originale
    const questionContext = {
      categoryId: (originalQuestion as any).category?.id || (originalQuestion as any).category,
      categoryName: (originalQuestion as any).category?.title || 'G√©n√©ral',
      courseId: (originalQuestion as any).course?.id || (originalQuestion as any).course,
      courseName: (originalQuestion as any).course?.title,
      difficultyLevel: (originalQuestion as any).difficultyLevel || 'pass',
      medicalDomain: (originalQuestion as any).medicalDomain || 'm√©decine g√©n√©rale'
    }

    console.log('üîÑ R√©g√©n√©ration de question:', {
      questionId,
      quizId,
      context: questionContext,
      reason: regenerationReason
    })

    // G√©n√©rer une nouvelle question avec le m√™me contexte
    const generatedQuestions = await aiService.generateQuestions({
      categoryId: questionContext.categoryId,
      categoryName: questionContext.categoryName,
      courseId: questionContext.courseId,
      courseName: questionContext.courseName,
      difficultyLevel: questionContext.difficultyLevel as 'pass' | 'las',
      questionCount: 1,
      medicalDomain: questionContext.medicalDomain
    }, req.user.id)

    if (!generatedQuestions || generatedQuestions.length === 0) {
      return new Response(JSON.stringify({ 
        error: '√âchec de la g√©n√©ration de la nouvelle question' 
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const newQuestionData = generatedQuestions[0]!

    // Mettre √† jour la question existante avec le nouveau contenu
    const updatedQuestion = await req.payload.update({
      collection: 'questions',
      id: questionId as string,
      data: {
        questionText: {
          root: {
            type: 'root',
            children: [{
              type: 'paragraph',
              children: [{
                type: 'text',
                text: newQuestionData.questionText
              }]
            }]
          }
        },
        options: newQuestionData.options.map(opt => ({
          optionText: opt.optionText,
          isCorrect: opt.isCorrect
        })),
        explanation: newQuestionData.explanation,
        generatedByAI: true,
        aiGenerationPrompt: newQuestionData.aiGenerationPrompt,
        qualityScore: newQuestionData.qualityScore,
        validationIssues: newQuestionData.validationIssues?.map(issue => ({ issue })) || [],
        // R√©initialiser le statut de validation
        validationStatus: 'pending',
        validationNotes: `R√©g√©n√©r√©e le ${new Date().toLocaleDateString()} - Raison: ${regenerationReason || 'Demande utilisateur'}`,
        validatedBy: null,
        validatedAt: null,
        regenerationReason: regenerationReason || 'user_request'
      }
    })

    // Logger l'action de r√©g√©n√©ration
    await req.payload.create({
      collection: 'auditlogs',
      data: {
        user: req.user.id,
        action: 'question_regenerated',
        collection: 'questions',
        documentId: questionId as string,
        diff: {
          quizId,
          regenerationReason,
          originalQualityScore: (originalQuestion as any).qualityScore,
          newQualityScore: newQuestionData.qualityScore,
          regeneratedAt: new Date().toISOString()
        },
        timestamp: new Date().toISOString()
      }
    })

    return new Response(JSON.stringify({
      success: true,
      question: updatedQuestion,
      message: 'Question r√©g√©n√©r√©e avec succ√®s',
      metadata: {
        originalQualityScore: (originalQuestion as any).qualityScore,
        newQualityScore: newQuestionData.qualityScore,
        regeneratedAt: new Date().toISOString()
      }
    }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    })

  } catch (error: any) {
    console.error('‚ùå Erreur r√©g√©n√©ration question:', error)
    
    return new Response(JSON.stringify({
      error: 'Erreur lors de la r√©g√©n√©ration de la question',
      details: error.message
    }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}