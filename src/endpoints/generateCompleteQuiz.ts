/**
 * Endpoint pour la g√©n√©ration et cr√©ation automatique de quiz complets
 * T√¢che 5: Cr√©ation automatique des quiz et questions
 */

import type { PayloadRequest } from 'payload';
import { AIQuizGenerationService } from '../services/AIQuizGenerationService';

interface GenerateCompleteQuizRequest {
  subject: string;
  categoryId: string;
  categoryName?: string;
  courseId?: string;
  courseName?: string;
  studentLevel: 'PASS' | 'LAS' | 'both';
  questionCount: number;
  difficulty?: 'easy' | 'medium' | 'hard';
  includeExplanations?: boolean;
  customInstructions?: string;
  medicalDomain?: string;
  published?: boolean;
}

export const generateCompleteQuizEndpoint = async (req: PayloadRequest): Promise<Response> => {
  try {
    // V√©rification de l'authentification et des permissions
    if (!req.user) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Authentification requise'
        }),
        {
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // V√©rification des permissions admin
    if (req.user.role !== 'admin' && req.user.role !== 'superadmin') {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Permissions administrateur requises'
        }),
        {
          status: 403,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Validation de la m√©thode HTTP
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'M√©thode POST requise'
        }),
        {
          status: 405,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // R√©cup√©ration et validation des donn√©es
    let requestData: GenerateCompleteQuizRequest;
    try {
      requestData = await req.json?.() as GenerateCompleteQuizRequest;
    } catch (error) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Donn√©es JSON invalides'
        }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Validation des champs requis
    const validationErrors = validateGenerationRequest(requestData);
    if (validationErrors.length > 0) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Donn√©es invalides',
          details: validationErrors
        }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üöÄ D√©but g√©n√©ration quiz complet:', {
      subject: requestData.subject,
      level: requestData.studentLevel,
      questions: requestData.questionCount,
      user: req.user.id
    });

    // Initialisation du service de g√©n√©ration
    const aiService = new AIQuizGenerationService(req.payload);

    // Configuration de la g√©n√©ration
    const generationConfig = {
      subject: requestData.subject,
      categoryId: requestData.categoryId,
      categoryName: requestData.categoryName,
      courseId: requestData.courseId,
      courseName: requestData.courseName,
      studentLevel: requestData.studentLevel,
      questionCount: requestData.questionCount,
      difficulty: requestData.difficulty || 'medium',
      includeExplanations: requestData.includeExplanations !== false,
      customInstructions: requestData.customInstructions,
      medicalDomain: requestData.medicalDomain,
      userId: req.user.id.toString(),
      published: requestData.published || false
    };

    // G√©n√©ration et cr√©ation automatique du quiz
    const result = await aiService.generateAndCreateCompleteQuiz(generationConfig);

    // Pr√©paration de la r√©ponse
    const responseData = {
      success: result.success,
      data: result.success ? {
        quizId: result.quizId,
        questionIds: result.questionIds,
        questionsCreated: result.questionsCreated,
        validationScore: result.validationScore,
        metadata: result.metadata
      } : undefined,
      errors: result.errors,
      warnings: result.warnings,
      processingTime: result.metadata.processingTime
    };

    const statusCode = result.success ? 200 : 400;

    console.log(`${result.success ? '‚úÖ' : '‚ùå'} G√©n√©ration termin√©e:`, {
      success: result.success,
      quizId: result.quizId,
      questionsCreated: result.questionsCreated,
      processingTime: result.metadata.processingTime
    });

    return new Response(
      JSON.stringify(responseData),
      {
        status: statusCode,
        headers: { 'Content-Type': 'application/json' }
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erreur endpoint g√©n√©ration quiz:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: 'Erreur interne du serveur',
        details: error.message
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
};

/**
 * Valide les donn√©es de la requ√™te de g√©n√©ration
 */
function validateGenerationRequest(data: any): string[] {
  const errors: string[] = [];

  // Validation des champs requis
  if (!data.subject || typeof data.subject !== 'string') {
    errors.push('Le sujet est requis et doit √™tre une cha√Æne de caract√®res');
  } else {
    if (data.subject.length < 10) {
      errors.push('Le sujet doit contenir au moins 10 caract√®res');
    }
    if (data.subject.length > 200) {
      errors.push('Le sujet ne peut pas d√©passer 200 caract√®res');
    }
  }

  if (!data.categoryId || typeof data.categoryId !== 'string') {
    errors.push('L\'ID de cat√©gorie est requis');
  }

  if (!data.studentLevel || !['PASS', 'LAS', 'both'].includes(data.studentLevel)) {
    errors.push('Le niveau √©tudiant doit √™tre PASS, LAS ou both');
  }

  if (!data.questionCount || typeof data.questionCount !== 'number') {
    errors.push('Le nombre de questions est requis et doit √™tre un nombre');
  } else {
    if (data.questionCount < 1 || data.questionCount > 20) {
      errors.push('Le nombre de questions doit √™tre entre 1 et 20');
    }
  }

  // Validation des champs optionnels
  if (data.difficulty && !['easy', 'medium', 'hard'].includes(data.difficulty)) {
    errors.push('La difficult√© doit √™tre easy, medium ou hard');
  }

  if (data.customInstructions && typeof data.customInstructions !== 'string') {
    errors.push('Les instructions personnalis√©es doivent √™tre une cha√Æne de caract√®res');
  }

  if (data.medicalDomain && typeof data.medicalDomain !== 'string') {
    errors.push('Le domaine m√©dical doit √™tre une cha√Æne de caract√®res');
  }

  if (data.published !== undefined && typeof data.published !== 'boolean') {
    errors.push('Le statut de publication doit √™tre un bool√©en');
  }

  return errors;
}

/**
 * Endpoint pour cr√©er un quiz de test
 */
export const createTestQuizEndpoint = async (req: PayloadRequest): Promise<Response> => {
  try {
    // V√©rifications de base
    if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'superadmin')) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Permissions administrateur requises'
        }),
        {
          status: 403,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'M√©thode POST requise'
        }),
        {
          status: 405,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    const { categoryId } = await req.json?.() as { categoryId: string };

    if (!categoryId) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'ID de cat√©gorie requis'
        }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    console.log('üß™ Cr√©ation quiz de test pour cat√©gorie:', categoryId);

    const aiService = new AIQuizGenerationService(req.payload);
    const result = await aiService.createTestQuizComplete(categoryId, req.user.id.toString());

    return new Response(
      JSON.stringify({
        success: result.success,
        data: result.success ? {
          quizId: result.quizId,
          questionIds: result.questionIds,
          questionsCreated: result.questionsCreated
        } : undefined,
        errors: result.errors,
        processingTime: result.metadata.processingTime
      }),
      {
        status: result.success ? 200 : 400,
        headers: { 'Content-Type': 'application/json' }
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erreur cr√©ation quiz de test:', error);

    return new Response(
      JSON.stringify({
        success: false,
        error: 'Erreur interne du serveur',
        details: error.message
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
};