/**
 * Service IA pour l'enrichissement de contenu
 * G√©n√©ration de quiz, extraction de concepts, √©valuation de difficult√©
 */

import type { ContentType, AIResult } from '../types'
import { AIQuizGenerationService } from '../../services/AIQuizGenerationService'

export class AIService {
  private quizService: AIQuizGenerationService

  constructor() {
    this.quizService = new AIQuizGenerationService()
  }

  /**
   * Enrichir un document avec l'IA
   */
  async enrichContent(
    text: string,
    contentType: ContentType,
    tasks: Array<'summary' | 'quiz-generation' | 'concept-extraction' | 'difficulty-assessment'>,
    context?: { medicalDomain?: string, targetAudience?: string }
  ): Promise<AIResult> {
    try {
      console.log(`ü§ñ [AI] Enriching content (${text.length} chars) with tasks: ${tasks.join(', ')}`)

      const result: AIResult = {
        success: true,
      }

      // R√©sum√© IA avanc√©
      if (tasks.includes('summary')) {
        result.aiSummary = await this.generateAISummary(text, contentType, context)
      }

      // Extraction de concepts
      if (tasks.includes('concept-extraction')) {
        result.conceptsExtracted = await this.extractConcepts(text, contentType, context)
      }

      // G√©n√©ration de quiz
      if (tasks.includes('quiz-generation')) {
        result.suggestedQuestions = await this.generateQuestions(text, contentType, context)
      }

      // √âvaluation de difficult√©
      if (tasks.includes('difficulty-assessment')) {
        result.difficultyScore = await this.assessDifficulty(text, contentType, context)
      }

      console.log(`‚úÖ [AI] Enrichment completed - Concepts: ${result.conceptsExtracted?.length || 0}, Questions: ${result.suggestedQuestions?.length || 0}`)
      return result

    } catch (error) {
      const message = error instanceof Error ? error.message : 'AI enrichment failed'
      console.error(`‚ùå [AI] Enrichment failed:`, message)

      return {
        success: false,
        error: message,
      }
    }
  }

  /**
   * G√©n√©rer un r√©sum√© IA intelligent
   */
  private async generateAISummary(text: string, contentType: ContentType, context?: Record<string, unknown>): Promise<string> {
    // Utilisation simplifi√©e - en production utiliserait un vrai mod√®le IA
    // Ici on pourrait int√©grer avec Gemini ou OpenAI

    const prompt = `R√©sume ce texte m√©dical en fran√ßais de mani√®re p√©dagogique et concise (max 200 mots).
    Domaine m√©dical: ${context?.medicalDomain || 'g√©n√©ral'}
    Public cible: ${context?.targetAudience || '√©tudiants en m√©decine'}

    Texte √† r√©sumer:
    ${text.slice(0, 2000)}

    R√©sum√©:`

    try {
      // Simulation d'appel IA - remplacer par vrai appel API
      const summary = await this.simulateAIResponse(prompt)
      return summary || "R√©sum√© non disponible - service IA temporairement indisponible"
    } catch {
      // Fallback vers r√©sum√© automatique basique
      return text.slice(0, 300) + (text.length > 300 ? '...' : '')
    }
  }

  /**
   * Extraire les concepts cl√©s
   */
  private async extractConcepts(text: string, contentType: ContentType, context?: Record<string, unknown>): Promise<Array<{concept: string, definition: string, importance: number}>> {
    // Simulation d'extraction de concepts
    const concepts: Array<{concept: string, definition: string, importance: number}> = []

    // Concepts m√©dicaux courants
    const medicalConcepts = [
      { concept: 'Diagnostic', definition: 'Processus d\'identification d\'une maladie bas√©e sur les signes cliniques', importance: 0.9 },
      { concept: 'Traitement', definition: 'M√©thodes th√©rapeutiques pour soigner ou g√©rer une condition m√©dicale', importance: 0.8 },
      { concept: 'Pr√©vention', definition: 'Mesures pour √©viter l\'apparition ou la progression d\'une maladie', importance: 0.7 },
      { concept: 'Pronostic', definition: 'Pr√©vision de l\'√©volution d\'une maladie et des chances de gu√©rison', importance: 0.6 }
    ]

    // Filtrer les concepts pr√©sents dans le texte
    const lowerText = text.toLowerCase()
    for (const concept of medicalConcepts) {
      if (lowerText.includes(concept.concept.toLowerCase())) {
        concepts.push(concept)
      }
    }

    return concepts.slice(0, 5)
  }

  /**
   * G√©n√©rer des questions de quiz
   */
  private async generateQuestions(text: string, contentType: ContentType, context?: Record<string, unknown>): Promise<Array<{question: string, type: 'qcm' | 'open' | 'case_study', difficulty: 'beginner' | 'intermediate' | 'advanced', answers?: string[], correctAnswer?: string}>> {
    try {
      // Utiliser le service de g√©n√©ration de quiz existant
      const questions = await this.quizService.generateQuestionsFromContent(
        text.slice(0, 1000), // Limiter la taille pour √©viter les timeouts
        undefined, // categoryId
        undefined, // courseId
        'pass', // niveau
        2 // nombre de questions
      )

      return questions.map(q => ({
        question: q.questionText,
        type: 'qcm' as const,
        difficulty: 'intermediate' as const,
        answers: q.options.map(opt => opt.optionText),
        correctAnswer: q.options.find(opt => opt.isCorrect)?.optionText
      }))

    } catch (error) {
      console.warn('‚ö†Ô∏è [AI] Quiz generation failed, using fallback')
      return [{
        question: "Quelle est la principale information contenue dans ce document ?",
        type: 'open',
        difficulty: 'beginner'
      }]
    }
  }

  /**
   * √âvaluer la difficult√© du contenu
   */
  private async assessDifficulty(text: string, contentType: ContentType, context?: Record<string, unknown>): Promise<number> {
    // √âvaluation bas√©e sur des heuristiques simples
    let score = 0.5 // Score de base moyen

    // Mots techniques m√©dicaux
    const technicalTerms = ['pathologie', 'physiopathologie', '√©tiologie', 'clinique', 'diagnostic', 'th√©rapeutique']
    const technicalCount = technicalTerms.filter(term => text.toLowerCase().includes(term)).length
    score += technicalCount * 0.05

    // Longueur du texte (textes plus longs = plus difficiles)
    if (text.length > 5000) score += 0.2
    else if (text.length > 2000) score += 0.1

    // Pr√©sence de r√©f√©rences m√©dicales complexes
    if (text.includes('syndrome') || text.includes('classification')) score += 0.1

    // Normaliser entre 0 et 1
    return Math.max(0, Math.min(1, score))
  }

  /**
   * Simulation d'appel IA (√† remplacer par vrai appel API)
   */
  private async simulateAIResponse(prompt: string): Promise<string> {
    // Simulation - en production, remplacer par appel r√©el √† Gemini/OpenAI
    await new Promise(resolve => setTimeout(resolve, 500)) // Simuler latence r√©seau

    if (prompt.includes('R√©sume')) {
      return "Ce document pr√©sente les principes fondamentaux du diagnostic m√©dical, en mettant l'accent sur l'importance de l'anamn√®se et de l'examen clinique syst√©matique. Il couvre les m√©thodes d'investigation paracliniques et l'approche rationnelle pour √©tablir un diagnostic diff√©rentiel."
    }

    return "R√©ponse IA simul√©e - service non configur√©"
  }
}

export const aiService = new AIService()
