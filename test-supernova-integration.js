/**
 * Script de test pour l'int√©gration code-supernova
 * Teste la connectivit√© et la g√©n√©ration de quiz avec les nouveaux services
 */

import { SupernovaService } from '../src/services/SupernovaService';
import { GeminiService } from '../src/services/GeminiService';
import { AIAPIService } from '../src/services/AIAPIService';

async function testSupernovaIntegration() {
  console.log('üß™ Test d\'int√©gration code-supernova...\n');

  try {
    // 1. Test de connectivit√© Supernova
    console.log('1Ô∏è‚É£ Test de connectivit√© Supernova...');
    const supernovaService = new SupernovaService();
    const connectivityTest = await supernovaService.testConnection();

    if (connectivityTest.connected) {
      console.log(`‚úÖ Supernova connect√© (${connectivityTest.responseTime}ms)`);
    } else {
      console.log(`‚ùå Erreur de connexion: ${connectivityTest.error}`);
      return;
    }

    // 2. Test de g√©n√©ration simple
    console.log('\n2Ô∏è‚É£ Test de g√©n√©ration simple...');
    const simpleRequest = {
      prompt: 'G√©n√®re un quiz m√©dical simple sur la cardiologie avec 2 questions.',
      maxTokens: 1000,
      temperature: 0.7,
      jsonMode: false
    };

    const response = await supernovaService.generateContentWithRetry(simpleRequest);
    console.log(`‚úÖ G√©n√©ration r√©ussie (${response.content.length} caract√®res)`);

    // 3. Test AIAPIService avec priorit√©
    console.log('\n3Ô∏è‚É£ Test AIAPIService avec priorit√©...');
    const aiService = new AIAPIService();

    const providers = aiService.getAvailableProviders();
    console.log('üìã Providers disponibles:', providers.map(p => `${p.name} (priorit√© ${p.priority})`));

    // Test avec pr√©f√©rence automatique (devrait choisir Supernova)
    const aiResponse = await aiService.generateContent({
      prompt: 'G√©n√®re une question m√©dicale sur l\'anatomie cardiaque.',
      maxTokens: 500,
      temperature: 0.7,
      jsonMode: false,
      preferredProvider: 'auto'
    });
    console.log(`‚úÖ G√©n√©ration AIAPIService r√©ussie (${aiResponse.provider})`);

    // 4. Test avec pr√©f√©rence sp√©cifique
    console.log('\n4Ô∏è‚É£ Test avec pr√©f√©rence Gemini...');
    const geminiResponse = await aiService.generateContent({
      prompt: 'G√©n√®re une question m√©dicale sur la physiologie cardiaque.',
      maxTokens: 500,
      temperature: 0.7,
      jsonMode: false,
      preferredProvider: 'gemini'
    });
    console.log(`‚úÖ Fallback Gemini r√©ussi (${geminiResponse.provider})`);

    console.log('\nüéâ Tous les tests d\'int√©gration r√©ussis !');
    console.log('\nüìä R√©sum√©:');
    console.log('- ‚úÖ code-supernova : Service principal');
    console.log('- ‚úÖ Gemini : Service de secours');
    console.log('- ‚úÖ AIAPIService : Orchestration intelligente');
    console.log('- ‚úÖ S√©lection automatique : Fonctionnelle');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests si appel√© directement
if (require.main === module) {
  testSupernovaIntegration();
}

export { testSupernovaIntegration };
